# PeerPortal AI智能体系统 v2.0 - Docker Compose 配置
# 完整的留学规划AI服务栈

version: '3.8'

services:
  # AI智能体主服务
  ai-agent:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: peerportal-ai-agent
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      # === 必需配置 ===
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # === 数据库配置 ===
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - SUPABASE_DB_PASSWORD=${SUPABASE_DB_PASSWORD}
      
      # === AI Agent v2.0 配置 ===
      - DEFAULT_MODEL=${DEFAULT_MODEL:-gpt-4o-mini}
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-text-embedding-ada-002}
      - REDIS_URL=redis://redis:6379
      - MILVUS_HOST=${MILVUS_HOST:-milvus}
      - MONGODB_URL=${MONGODB_URL:-mongodb://mongodb:27017}
      
      # === 系统配置 ===
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-PeerPortal-AI-Agent}
      
      # === 性能配置 ===
      - AGENT_MAX_ITERATIONS=${AGENT_MAX_ITERATIONS:-10}
      - AGENT_TIMEOUT_SECONDS=${AGENT_TIMEOUT_SECONDS:-300}
      - MEMORY_SESSION_TTL=${MEMORY_SESSION_TTL:-86400}
    
    volumes:
      - ./knowledge_base:/app/knowledge_base:ro
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - vector_store:/app/vector_store
    
    depends_on:
      - redis
      - mongodb
    
    networks:
      - ai-agent-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis - 短期记忆缓存
  redis:
    image: redis:7.2-alpine
    container_name: peerportal-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # MongoDB - 文档存储 (可选)
  mongodb:
    image: mongo:7.0
    container_name: peerportal-mongodb
    restart: unless-stopped
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-password123}
      - MONGO_INITDB_DATABASE=peerportal
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb-init:/docker-entrypoint-initdb.d:ro
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Milvus Standalone - 向量数据库 (可选，企业级部署)
  milvus:
    image: milvusdb/milvus:v2.3.4
    container_name: peerportal-milvus
    restart: unless-stopped
    ports:
      - "${MILVUS_PORT:-19530}:19530"
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - milvus_data:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    networks:
      - ai-agent-network
    profiles:
      - full-stack  # 只在完整部署时启用

  # Etcd - Milvus依赖
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: peerportal-etcd
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    networks:
      - ai-agent-network
    profiles:
      - full-stack

  # MinIO - 对象存储 (Milvus依赖)
  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    container_name: peerportal-minio
    restart: unless-stopped
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    command: minio server /minio_data --console-address ":9001"
    volumes:
      - minio_data:/minio_data
    networks:
      - ai-agent-network
    profiles:
      - full-stack

  # Nginx - 反向代理 (生产环境)
  nginx:
    image: nginx:1.25-alpine
    container_name: peerportal-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-agent
    networks:
      - ai-agent-network
    profiles:
      - production

# 数据卷
volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  milvus_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  vector_store:
    driver: local

# 网络配置
networks:
  ai-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16